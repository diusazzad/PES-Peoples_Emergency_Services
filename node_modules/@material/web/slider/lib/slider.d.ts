/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import '../../elevation/elevation.js';
import '../../focus/focus-ring.js';
import '../../ripple/ripple.js';
import { LitElement, PropertyValues } from 'lit';
import { getFormValue } from '../../controller/form-controller.js';
/**
 * Slider component.
 */
export declare class Slider extends LitElement {
    static shadowRootOptions: ShadowRootInit;
    /** @nocollapse */
    static get formAssociated(): boolean;
    /**
     * Whether or not the slider is disabled.
     */
    disabled: boolean;
    /**
     * The slider minimum value
     */
    min: number;
    /**
     * The slider maximum value
     */
    max: number;
    /**
     * The slider value displayed when range is false.
     */
    value: number;
    /**
     * The slider start value displayed when range is true.
     */
    valueStart: number;
    /**
     * The slider end value displayed when range is true.
     */
    valueEnd: number;
    /**
     * An optional label for the slider's value displayed when range is
     * false; if not set, the label is the value itself.
     */
    valueLabel?: string | undefined;
    /**
     * An optional label for the slider's start value displayed when
     * range is true; if not set, the label is the valueStart itself.
     */
    valueStartLabel?: string | undefined;
    /**
     * An optional label for the slider's end value displayed when
     * range is true; if not set, the label is the valueEnd itself.
     */
    valueEndLabel?: string | undefined;
    /**
     * The step between values.
     */
    step: number;
    /**
     * Whether or not to show tick marks.
     */
    withTickMarks: boolean;
    /**
     * Whether or not to show a value label when activated.
     */
    withLabel: boolean;
    /**
     * Whether or not to show a value range. When false, the slider displays
     * a slideable handle for the value property; when true, it displays
     * slideable handles for the valueStart and valueEnd properties.
     */
    range: boolean;
    /**
     * The HTML name to use in form submission.
     */
    name: string;
    /**
     * The associated form element with which this element's value will submit.
     */
    get form(): HTMLFormElement;
    private getMetrics;
    private readonly inputA;
    private readonly handleA;
    private readonly rippleA;
    private readonly inputB;
    private readonly handleB;
    private readonly rippleB;
    private valueA;
    private valueB;
    private rippleAShowing;
    private rippleBShowing;
    private handleAHover;
    private handleBHover;
    private onTopId;
    private handlesOverlapping;
    constructor();
    focus(): void;
    [getFormValue](): string;
    private isFlipped;
    protected willUpdate(changed: PropertyValues): void;
    protected updated(changed: PropertyValues): Promise<void>;
    protected render(): import("lit-html").TemplateResult<1>;
    private renderTrack;
    private renderLabel;
    private renderHandle;
    private renderInput;
    private readonly renderRipple;
    private readonly getRippleA;
    private readonly getRippleB;
    private toggleRippleHover;
    private isEventOnA;
    private handleFocus;
    private ripplePointerId;
    private handleDown;
    /**
     * The move handler tracks handle hovering to facilitate proper ripple
     * behavior on the slider handle. This is needed because user interaction with
     * the native input is leveraged to position the handle. Because the separate
     * displayed handle element has pointer events disabled (to allow interaction
     * with the input) and the input's handle is a pseudo-element, neither can be
     * the ripple's interactive element. Therefore the input is the ripple's
     * interactive element and has a `ripple` directive; however the ripple
     * is gated on the handle being hovered. In addition, because the ripple
     * hover state is being specially handled, it must be triggered independent
     * of the directive. This is done based on the hover state when the
     * slider is updated.
     */
    private handleMove;
    private handleEnter;
    private handleLeave;
    private updateOnTop;
    private handleInput;
    private handleChange;
}
