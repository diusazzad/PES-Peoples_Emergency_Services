{"version":3,"file":"form-controller.js","sourceRoot":"","sources":["form-controller.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAoCH;;;GAGG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;AAEnD;;;;;;;;;GASG;AACH,MAAM,OAAO,cAAc;IAGzB;;;;OAIG;IACH,YAA6B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;QAoBhC,qBAAgB,GAAG,CAAC,KAAoB,EAAE,EAAE;YAC3D,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;gBACzB,sEAAsE;gBACtE,OAAO;aACR;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;YAC3C,sEAAsE;YACtE,wEAAwE;YACxE,QAAQ;YACR,IAAI,KAAK,YAAY,QAAQ,EAAE;gBAC7B,KAAK,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,KAAK,EAAE;oBACpC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;iBACvC;gBACD,OAAO;aACR;YAED,4EAA4E;YAC5E,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;gBACxC,OAAO;aACR;YAED,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC;IA3CkD,CAAC;IAErD,aAAa;QACX,wEAAwE;QACxE,0EAA0E;QAC1E,sBAAsB;QACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,MAAM,CAAC,QAAQ,EAAE,KAAK,EAAE;YACtD,OAAO;SACR;QAED,wEAAwE;QACxE,iCAAiC;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAC9B,IAAI,CAAC,IAAI,EAAE,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACjE,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,IAAI,EAAE,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACpE,CAAC;CA0BF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ReactiveController, ReactiveControllerHost} from 'lit';\n\ndeclare global {\n  interface Window {\n    ShadyDOM?: {inUse: boolean;};\n  }\n}\n\n/**\n * An element that `FormController` may use.\n */\nexport interface FormElement extends ReactiveControllerHost, HTMLElement {\n  /**\n   * The `<form>` that this element is associated with.\n   */\n  readonly form: HTMLFormElement|null;\n  /**\n   * The name of the element in the form. This property should reflect to a\n   * `name` attribute.\n   */\n  name: string;\n  /**\n   * Whether or not this element is disabled. If present, this property should\n   * reflect to a `disabled` attribute.\n   */\n  disabled?: boolean;\n  /**\n   * A function that retrieves the current form value for this element.\n   *\n   * @return The current form value, or `null` if there is no value.\n   */\n  [getFormValue](): string|File|FormData|null;\n}\n\n/**\n * A unique symbol key for `FormController` elements to implement their\n * `getFormValue()` function.\n */\nexport const getFormValue = Symbol('getFormValue');\n\n/**\n * A `ReactiveController` that adds `<form>` support to an element.\n *\n * Elements should also set `static formAssociated = true` which\n * provides platform support for forms. When an element is form associated,\n * it can be activated via clicks on associated label elements. It is the\n * responsibility of the element to process this click and perform any necessary\n * activation tasks, for example focusing and clicking on an internal element.\n *\n */\nexport class FormController implements ReactiveController {\n  private form?: HTMLFormElement|null;\n\n  /**\n   * Creates a new `FormController` for the given element.\n   *\n   * @param element The element to add `<form>` support to.\n   */\n  constructor(private readonly element: FormElement) {}\n\n  hostConnected() {\n    // If the component internals are not in Shadow DOM, subscribing to form\n    // data events could lead to duplicated data, which may not work correctly\n    // on the server side.\n    if (!this.element.shadowRoot || window.ShadyDOM?.inUse) {\n      return;\n    }\n\n    // Preserve a reference to the form, since on hostDisconnected it may be\n    // null if the child was removed.\n    this.form = this.element.form;\n    this.form?.addEventListener('formdata', this.formDataListener);\n  }\n\n  hostDisconnected() {\n    this.form?.removeEventListener('formdata', this.formDataListener);\n  }\n\n  private readonly formDataListener = (event: FormDataEvent) => {\n    if (this.element.disabled) {\n      // Check for truthiness since some elements may not support disabling.\n      return;\n    }\n\n    const value = this.element[getFormValue]();\n    // If given a `FormData` instance, append all values to the form. This\n    // allows elements to customize what is added beyond a single name/value\n    // pair.\n    if (value instanceof FormData) {\n      for (const [key, dataValue] of value) {\n        event.formData.append(key, dataValue);\n      }\n      return;\n    }\n\n    // Do not associate the value with the form if there is no value or no name.\n    if (value === null || !this.element.name) {\n      return;\n    }\n\n    event.formData.append(this.element.name, value);\n  };\n}\n"]}