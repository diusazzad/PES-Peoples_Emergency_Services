{"version":3,"file":"harness.js","sourceRoot":"","sources":["harness.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAqB,OAAO,EAAC,MAAM,uBAAuB,CAAC;AAKlE;;GAEG;AACH,MAAM,OAAO,UAAW,SAAQ,OAAY;IACjC,KAAK,CAAC,qBAAqB;QAClC,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU;aACzB,aAAa,CAAoC,SAAS,CAAE,CAAC;IACpE,CAAC;IAEO,KAAK,CAAC,0BAA0B;QACtC,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;QAClC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;QAC1D,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAClC,SAAS,CAAC,MAAM,EAAE,CAAC;SACpB;IACH,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACxC,MAAM,OAAO,GAAG,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC;QACpE,OAAO,OAAO,KAAK,GAAG,CAAC;IACzB,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,WAAY,SAAQ,OAAa;IAC5C,mEAAmE;IACnE,gBAAgB;IACP,KAAK,CAAC,qBAAqB;QAClC,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;QAClC,MAAM,mBAAmB,GACpB,IAAI,CAAC,OAAO,CAAC,YAAwC,CAAC,OACzC;YACd,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC9C,OAAO,MAAM,mBAAmB,CAAC,qBAAqB,EAAE,CAAC;IAC3D,CAAC;IAED,IAAI,cAAc;QAChB,oCAAoC;QACpC,yDAAyD;QACzD,OAAQ,IAAI,CAAC,OAAO,CAAC,OAAO,CAAoC;aAC3D,GAAG,CAAC,IAAI,CAAC,EAAE;YACV,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,CAAe,CAAC;QAC9D,CAAC,CAAC,CAAC;IACT,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ElementWithHarness, Harness} from '../testing/harness.js';\n\nimport {Tab} from './lib/tab.js';\nimport {Tabs} from './lib/tabs.js';\n\n/**\n * Test harness for Tab.\n */\nexport class TabHarness extends Harness<Tab> {\n  override async getInteractiveElement() {\n    await this.element.updateComplete;\n    return this.element.renderRoot\n        .querySelector<HTMLButtonElement|HTMLLinkElement>('.button')!;\n  }\n\n  private async completeIndicatorAnimation() {\n    await this.element.updateComplete;\n    const animations = this.element.indicator.getAnimations();\n    for (const animation of animations) {\n      animation.finish();\n    }\n  }\n\n  async isIndicatorShowing() {\n    await this.completeIndicatorAnimation();\n    const opacity = getComputedStyle(this.element.indicator)['opacity'];\n    return opacity === '1';\n  }\n}\n\n/**\n * Test harness for Tabs.\n */\nexport class TabsHarness extends Harness<Tabs> {\n  // Note, Tabs interactive element is the interactive element of the\n  // selected tab.\n  override async getInteractiveElement() {\n    await this.element.updateComplete;\n    const selectedItemHarness =\n        (this.element.selectedItem as ElementWithHarness<Tab>).harness as\n            TabHarness ??\n        new TabHarness(this.element.selectedItem);\n    return await selectedItemHarness.getInteractiveElement();\n  }\n\n  get harnessedItems() {\n    // Test access to protected property\n    // tslint:disable-next-line:no-dict-access-on-struct-type\n    return (this.element['items'] as Array<ElementWithHarness<Tab>>)\n        .map(item => {\n          return (item.harness ?? new TabHarness(item)) as TabHarness;\n        });\n  }\n}\n"]}