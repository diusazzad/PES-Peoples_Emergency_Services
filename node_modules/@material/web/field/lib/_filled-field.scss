//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// go/keep-sorted start
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
// go/keep-sorted end
// go/keep-sorted start
@use '../../tokens';
// go/keep-sorted end

$_md-sys-motion: tokens.md-sys-motion-values();

@mixin theme($tokens) {
  $supported-tokens: list.join(
    tokens.$md-comp-filled-field-supported-tokens,
    (
      'container-shape-start-start',
      'container-shape-start-end',
      'container-shape-end-end',
      'container-shape-end-start'
    )
  );

  @each $token, $value in $tokens {
    @if list.index($supported-tokens, $token) == null {
      @error 'Token `#{$token}` is not a supported token.';
    }

    @if $token == 'container-shape' and meta.type-of($value) == 'list' {
      @error 'Filled field `container-shape` may not be specified as a list. Use logical (`*-start-start`) tokens instead.';
    }

    @if $value {
      --md-filled-field-#{$token}: #{$value};
    }
  }
}

@mixin styles() {
  $tokens: tokens.md-comp-filled-field-values();

  :host {
    @each $token, $value in $tokens {
      @if $token == 'container-shape' {
        // Support logical shape properties. Filled field has a default oblong
        // shape, which is why the fallback value is unique per corner.
        --_container-shape-start-start: var(
          --md-filled-field-container-shape-start-start,
          var(--md-filled-field-container-shape, #{list.nth($value, 1)})
        );
        --_container-shape-start-end: var(
          --md-filled-field-container-shape-start-end,
          var(--md-filled-field-container-shape, #{list.nth($value, 2)})
        );
        --_container-shape-end-end: var(
          --md-filled-field-container-shape-end-end,
          var(--md-filled-field-container-shape, #{list.nth($value, 3)})
        );
        --_container-shape-end-start: var(
          --md-filled-field-container-shape-end-start,
          var(--md-filled-field-container-shape, #{list.nth($value, 4)})
        );
      } @else {
        --_#{$token}: var(--md-filled-field-#{$token}, #{$value});
      }
    }
  }

  .background,
  .state-layer {
    border-radius: inherit;
    inset: 0;
    pointer-events: none;
    position: absolute;
  }

  .background {
    background: var(--_container-color);
  }

  .state-layer {
    visibility: hidden;
  }

  .field:not(.disabled):hover .state-layer {
    visibility: visible;
  }

  .label.floating {
    position: absolute;
    top: 0;
  }

  .active-indicator {
    inset: auto 0 0 0;
    // Prevent click events on the indicator element since it has no width and
    // causes bugs when handled by the foundation for updating transform-origin.
    pointer-events: none;
    position: absolute;
    width: 100%;

    &::before,
    &::after {
      border-bottom: var(--_active-indicator-height) solid
        var(--_active-indicator-color);
      inset: auto 0 0 0;
      content: '';
      position: absolute;
      width: 100%;
    }

    // focused indicator
    &::after {
      opacity: 0;
      transition: opacity map.get($_md-sys-motion, 'duration-short3')
        map.get($_md-sys-motion, 'easing-emphasized');
    }
  }

  .focused .active-indicator::after {
    opacity: 1;
  }

  .field:not(.with-start) .start {
    padding-inline-start: var(--_container-padding-horizontal);
  }

  .field:not(.with-end) .end {
    padding-inline-end: var(--_container-padding-horizontal);
  }

  .field:not(.no-label) .container {
    padding-bottom: var(--_with-label-container-padding-vertical);
    padding-top: var(--_with-label-container-padding-vertical);
  }

  .field:not(.no-label) .middle {
    padding-top: var(--_label-text-populated-line-height);
  }

  :hover .active-indicator::before {
    border-bottom-color: var(--_hover-active-indicator-color);
    border-bottom-width: var(--_hover-active-indicator-height);
  }

  // Focus is on a separate element and does not need a focus selector
  .active-indicator::after {
    border-bottom-color: var(--_focus-active-indicator-color);
    border-bottom-width: var(--_focus-active-indicator-height);
  }

  :hover .state-layer {
    background: var(--_hover-state-layer-color);
    opacity: var(--_hover-state-layer-opacity);
  }

  .disabled .active-indicator::before {
    border-bottom-color: var(--_disabled-active-indicator-color);
    border-bottom-width: var(--_disabled-active-indicator-height);
    opacity: var(--_disabled-active-indicator-opacity);
  }

  .disabled .background {
    background: var(--_disabled-container-color);
    opacity: var(--_disabled-container-opacity);
  }

  .error .active-indicator::before {
    border-bottom-color: var(--_error-active-indicator-color);
  }

  .error:hover .active-indicator::before {
    border-bottom-color: var(--_error-hover-active-indicator-color);
  }

  .error:hover .state-layer {
    background: var(--_error-hover-state-layer-color);
    opacity: var(--_error-hover-state-layer-opacity);
  }

  // Focus is on a separate element and does not need a focus selector
  .error .active-indicator::after {
    border-bottom-color: var(--_error-focus-active-indicator-color);
  }
}
