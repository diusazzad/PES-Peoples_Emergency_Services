/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import '../../../ripple/ripple.js';
import '../../../focus/focus-ring.js';
import { LitElement, nothing, PropertyValues } from 'lit';
import { ARIARole } from '../../../aria/aria.js';
import { MdRipple } from '../../../ripple/ripple.js';
interface ListItemSelf {
    active: boolean;
    disabled: boolean;
}
/**
 * The interface of an item that is compatible with md-list. An item that is
 * selectable and disablable.
 */
export type ListItem = ListItemSelf & HTMLElement;
export declare class ListItemEl extends LitElement implements ListItem {
    /**
     * The primary, headline text of the list item.
     */
    headline: string;
    /**
     * The one-line supporting text below the headline. Set
     * `multiLineSupportingText` to `true` to support multiple lines in the
     * supporting text.
     */
    supportingText: string;
    /**
     * Modifies `supportingText` to support multiple lines.
     */
    multiLineSupportingText: boolean;
    /**
     * The supporting text placed at the end of the item. Overriden by elements
     * slotted into the `end` slot.
     */
    trailingSupportingText: string;
    /**
     * Disables the item and makes it non-selectable and non-interactive.
     */
    disabled: boolean;
    /**
     * The tabindex of the underlying item.
     *
     * __NOTE:__ this is overriden by the keyboard behavior of `md-list` and by
     * setting `selected`.
     */
    itemTabIndex: number;
    /**
     * Whether or not the element is actively being interacted with by md-list.
     * When active, tabindex is set to 0, and in some list item variants (like
     * md-list-item), focuses the underlying item.
     */
    active: boolean;
    /**
     * READONLY. Sets the `md-list-item` attribute on the element.
     */
    isListItem: boolean;
    private readonly ripple;
    protected readonly listItemRoot: HTMLElement | null;
    protected readonly listItemRole: ARIARole;
    private showRipple;
    /**
     * Only meant to be overriden by subclassing and not by the user. This is
     * so that we have control over focus on specific variants such as disabling
     * focus on <md-autocomplete-item> but enabling it for <md-menu-item>.
     */
    protected focusOnActivation: boolean;
    protected readonly getRipple: () => Promise<MdRipple>;
    protected isFirstUpdate: boolean;
    protected willUpdate(changed: PropertyValues<this>): void;
    protected render(): import("lit-html").TemplateResult<1>;
    /**
     * Renders the root list item.
     *
     * @param content {unkown} the child content of the list item.
     */
    protected renderListItem(content: unknown): import("lit-html").TemplateResult<1>;
    /**
     * Handles rendering of the ripple element.
     */
    protected renderRipple(): import("lit-html").TemplateResult<1> | typeof nothing;
    /**
     * Handles rendering of the focus ring.
     */
    protected renderFocusRing(): import("lit-html").TemplateResult<1>;
    /**
     * Classes applied to the list item root.
     */
    protected getRenderClasses(): {
        'with-one-line': boolean;
        'with-two-line': boolean;
        'with-three-line': boolean;
        disabled: boolean;
    };
    /**
     * The content rendered at the start of the list item.
     */
    protected renderStart(): import("lit-html").TemplateResult<1>;
    /**
     * Handles rendering the headline and supporting text.
     */
    protected renderBody(): import("lit-html").TemplateResult<1>;
    /**
     * Renders the one-line supporting text.
     */
    protected renderSupportingText(): import("lit-html").TemplateResult<1>;
    /**
     * Gets the classes for the supporting text node
     */
    protected getSupportingTextClasses(): {
        'supporting-text--multi-line': boolean;
    };
    /**
     * The content rendered at the end of the list item.
     */
    protected renderEnd(): import("lit-html").TemplateResult<1>;
    /**
     * Renders the supporting text at the end of the list item.
     */
    protected renderTrailingSupportingText(): import("lit-html").TemplateResult<1>;
    protected onClick?(event: Event): void;
    protected onKeydown?(event: KeyboardEvent): void;
    protected onPointerenter?(event: Event): void;
    protected onPointerleave?(event: Event): void;
    protected updated(changed: PropertyValues<this>): void;
    focus(): void;
}
export {};
